#!groovy
// start

properties([disableConcurrentBuilds()])

pipeline {
    agent {
        node {
            label 'slave'
        }
    }
    environment {
        IMAGE = "shvadim84/cloudinactiondockerrepo"
        DOCKER_HUB_REPO_CREDANTIALS_ID = 'dockerhub'
        TARGET_APP_SERVER = 'ec2-user@ec2-18-223-156-106.us-east-2.compute.amazonaws.com'
        SSH_CREDENTIALS_ID = 'ssh_private_key_ec2_vm_app'
        DOCKER_IMAGE = ''
        REMOVE_CONTAINERS_AND_IMAGES = "'docker ps -aq | xargs -r docker container rm -f && docker image prune -fa'"
        DEPLOY_IMAGE_EC2_OPERATIONS = "docker pull ${IMAGE}:$BUILD_NUMBER && " +
                                      "docker run -d -p 80:8080 ${IMAGE}:$BUILD_NUMBER"
    }
    tools {
        jdk 'jdk8'
        gradle 'gradle'
    }
    options {
        timestamps()
    }

    stages {
        stage("Checkout") {
            steps {
                checkout(scm: [
                        $class           : 'GitSCM',
                        userRemoteConfigs: [
                                [
                                        url : 'https://github.com/Vadim1984/cloudInAction.git',
                                        name: 'origin'
                                ]
                        ],
                        branches         : [
                                [name: 'refs/heads/master']
                        ]
                ])
            }
        }
        stage('Build app') {
            steps {
                echo "Running build: :$BUILD_NUMBER"
                sh 'gradle clean build --no-daemon -x test'
            }
        }
        stage('Test') {
            steps {
                script {
                    try {
                        sh 'gradle test --no-daemon'
                    } finally {
                        junit '**/build/test-results/test/*.xml'
                    }
                }
            }
        }
        stage('Build image') {
            steps {
                script {
                    DOCKER_IMAGE = docker.build IMAGE
                }
            }
        }
        stage('Deploy image to DockerHub') {
            steps {
                script {
                    docker.withRegistry( '', DOCKER_HUB_REPO_CREDANTIALS_ID ) {
                        DOCKER_IMAGE.push("$BUILD_NUMBER")
                        DOCKER_IMAGE.push("latest")
                    }
                }
            }
        }
        stage('Cleanup build env') {
            steps {
                sh 'docker system prune -af --volumes'
            }
        }
        stage('Cleanup app server') {
            steps{
                sshagent(credentials:[SSH_CREDENTIALS_ID]) {
                    sh """
                           ssh -o StrictHostKeyChecking=no ${TARGET_APP_SERVER} \
                           ${REMOVE_CONTAINERS_AND_IMAGES}
                       """
                }
            }
        }
        stage('Deploy app to app server') {
            steps {
                sshagent(credentials:[SSH_CREDENTIALS_ID]) {
                    sh 'ssh -o StrictHostKeyChecking=no ${TARGET_APP_SERVER} ${DEPLOY_IMAGE_EC2_OPERATIONS}'
                }
            }
        }
    }
    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}