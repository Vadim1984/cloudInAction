#!groovy
// start

properties([disableConcurrentBuilds()])

pipeline {
    agent any
    environment {
        registry = "shvadim84/cloudinactiondockerrepo"
        registryCredential = 'dockerhub'
        TARGET_APP_SERVER = 'ec2-3-12-102-248.us-east-2.compute.amazonaws.com'
        JENKINS_USER = 'jenkins'
        dockerImage = ''
    }
    tools {
        jdk 'jdk8'
        gradle 'gradle'
    }
    options {
        timestamps()
    }

    stages {
        stage("Checkout") {
            steps {
                checkout(scm: [
                        $class           : 'GitSCM',
                        userRemoteConfigs: [
                                [
                                        url : 'https://github.com/Vadim1984/cloudInAction.git',
                                        name: 'origin'
                                ]
                        ],
                        branches         : [
                                [name: 'refs/heads/master']
                        ]
                ])
            }
        }
        stage('Build app') {
            steps {
                echo "Running build: :$BUILD_NUMBER"
                sh 'gradle clean build --no-daemon -x test'
            }
        }
        stage('Build image') {
            steps {
                script {
                    dockerImage = docker.build registry + ":latest"
                }
            }
        }
        stage('Deploy image') {
            steps {
                script {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('clean up docker resources') {
            steps{
                echo 'TO-DO: clean images and containers'
            }
        }
    }
    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}